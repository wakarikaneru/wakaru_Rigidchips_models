// 編隊飛行用単純飛行機
Val
{
  PITCHING(default=0, min=-30, max=30)
  POWER(default=0, min=-50000, max=50000)
  ROLLING(default=0, min=-30, max=30)
  TRIG(default=0, max=1600000)
  YAWING(default=180, min=150, max=210)
}
Key
{
}
Body
{
  Core(name=CORE) {
    N:Arm(name=ARM) { }
    W:Trim(name=AILERON_L, angle=ROLLING) { }
    E:Trim(name=AILERON_R, angle=ROLLING) { }
    S:Chip(name=ELEVATOR, angle=PITCHING) { }
    S:Frame(name=JET_MOUNT, angle=150, option=1, spring=1, damper=1) {
      S:Jet(name=JET, angle=120, power=POWER, effect=2, spring=1, damper=1) { }
    }
    S:TrimF(name=YAW_MOUNT, angle=90, option=1) {
      N:Chip(name=YAW, angle=YAWING) { }
      N:Chip() { }
    }
  }
}
Lua
{
  -- キー番号の変数化
  KEY_UP=0;
  KEY_DOWN=1;
  KEY_LEFT=2;
  KEY_RIGHT=3;
  KEY_Z=4;
  KEY_X=5;
  KEY_C=6;
  KEY_A=7;
  KEY_S=8;
  KEY_D=9;
  KEY_V=10;
  KEY_B=11;
  KEY_F=12;
  KEY_G=13;
  KEY_Q=14;
  KEY_W=15;
  KEY_E=16;

  function analog(i)
    if i==-1 then
      mouseX=(_WIDTH()/2-_MX())*2/_HEIGHT();
      return limit(mouseX, -1, 1)*_MR();
    elseif _ANALOG(i)==0 then
      return 0;
    else
      --return _ANALOG(i)/1000;
      return (_ANALOG(i)/1000)^2.0*(_ANALOG(i)/math.abs(_ANALOG(i)));
    end
  end

  initflag=false;

  require("wakaru/wakaru_eye.lua");

  function init()
    initflag=true;

    -- 補間ライブラリの初期化
    mono=Wakaru_Mono.new();
	
    monoMe=Wakaru_Mono.new();
	
    -- 基準となるベクトルの作成(補間ライブラリ)
    VECX=Wector.new(1, 0, 0);
    VECY=Wector.new(0, 1, 0);
    VECZ=Wector.new(0, 0, 1);
    VEC0=Wector.new(0, 0, 0);

    -- 自動運転モード
    autoMode=true;
    -- 編隊飛行モード
    formationMode=false;

    -- 機体情報
    bodyVX=0;
    bodyVY=0;
    bodyVZ=0;
    bodyVXKmh=0;
    bodyVYKmh=0;
    bodyVZKmh=0;
    bodyWX=0;
    bodyWY=0;
    bodyWZ=0;
    bodyWXDeg=0;
    bodyWYDeg=0;
    bodyWZDeg=0;

    -- 機体運動の基準信号
    -- 速度はkm/h、角度は度/秒
    inputSpeed=0;
    inputRoll=0;
    inputPitch=0;
    inputYaw=0;

    powerTemp=0;
    pitchTemp=0;
    rollTemp=0;
    yawTemp=0;

    targetSelecter=0;
    target=nil;
	
	dis=0;
	disSpd=0;
	disBuf=0;
	
	
    formationVec=Wector.new(0, 0, 0);
  end

  function main()
    if not initflag then init() end

    -- 機体情報の取得
	monoMe:tick(Wector:getPosVec(CORE))
    bodyVX=_VX(CORE);
    bodyVY=_VY(CORE);
    bodyVZ=_VZ(CORE);
    bodyVXKmh=bodyVX*3600/1000;
    bodyVYKmh=bodyVY*3600/1000;
    bodyVZKmh=bodyVZ*3600/1000;

    bodyWX=_WX(CORE);
    bodyWY=_WY(CORE);
    bodyWZ=_WZ(CORE);
    bodyWXDeg=math.deg(bodyWX);
    bodyWYDeg=math.deg(bodyWY);
    bodyWZDeg=math.deg(bodyWZ);

    if _KEYDOWN(KEY_F)==1 then
      autoMode=not autoMode;
    end
    if autoMode then
      -- 自動操作
		out(5, "AUTO [F]  ON");
		auto();
    else
		-- 手動操作
		inputSpeed=inputSpeed+(_KEY(KEY_Q)-_KEY(KEY_A)-analog(4))*10;
		inputRoll=step2(inputRoll, (_KEY(KEY_LEFT)-_KEY(KEY_RIGHT)+analog(0))*180, 360/3);
		inputPitch=step2(inputPitch, (_KEY(KEY_UP)-_KEY(KEY_DOWN)+analog(1))*180, 360/3);
		inputYaw=step2(inputYaw, (_KEY(KEY_Z)-_KEY(KEY_C)-analog(2))*180, 360/3);
    end

    inputSpeed=limit(inputSpeed, 0, 500);
    inputRoll=limit(inputRoll, -360, 360);
    inputPitch=limit(inputPitch, -360, 360);
    inputYaw=limit(inputYaw, -360, 360);

    out(5, "SPEED "..inputSpeed);
    out(6, "ROLL "..inputRoll);
    out(7, "PITCH "..inputPitch);
    out(8, "YAW "..inputYaw);

    --機体制御
    lowSpeed=10;
    speedCorrection=0.1;
    if math.abs(bodyVZKmh)==0 then
		speedCorrection=0.0;
    elseif math.abs(bodyVZKmh)<lowSpeed then
		speedCorrection=limit(math.abs(bodyVZKmh)/lowSpeed, -0.1, 0.1);
    else
		speedCorrection=limit(lowSpeed/-bodyVZKmh, -0.1, 0.1)
    end
    powerTemp=powerTemp*0.75+(inputSpeed+bodyVZKmh)*500;
    POWER=limit(powerTemp, -50000, 50000);

    pitchTemp=pitchTemp*0.75+(inputPitch-(-bodyWXDeg))/3;
    rollTemp=rollTemp*0.75+(inputRoll-(-bodyWZDeg))/3;
    yawTemp=yawTemp*0.75+(inputYaw-(-bodyWYDeg))/3;

    PITCHING=pitchTemp*speedCorrection;
    ROLLING=rollTemp*speedCorrection;
    YAWING=yawTemp*speedCorrection*2+180;

  end

  function auto()

    if _PLAYERS()~=0 then
      if _KEYDOWN(KEY_B)==1 then targetSelecter=targetSelecter+1; end
      if _KEYDOWN(KEY_V)==1 then targetSelecter=targetSelecter-1; end
      if targetSelecter<0 then targetSelecter=_PLAYERS()-1
      elseif _PLAYERS()<=targetSelecter then targetSelecter=0 end
      out(0, "TARGET SELECT [V] "..(targetSelecter+1).."/".._PLAYERS().." ".._PLAYERNAME(targetSelecter).." [B] ");
    else
      out(0, "OFFLINE");
    end

    if _KEYDOWN(KEY_G)==1 then
      if target==targetSelecter then
        target=nil;
      else
        target=targetSelecter;
      end
    end
    if target==nil then
      out(1, "TARGET [G] NO TARGET");
    else
      out(1, "TARGET [G] "..(target+1).."/".._PLAYERS().." ".._PLAYERNAME(target));
    end
	
    formationVec.x=formationVec.x+(_KEY(KEY_Q)-_KEY(KEY_A));
    formationVec.y=formationVec.y+(_KEY(KEY_W)-_KEY(KEY_S));
    formationVec.z=formationVec.z+(_KEY(KEY_E)-_KEY(KEY_D));
	
    out(10, "FORMATION X [Q][A] "..formationVec.x);
    out(11, "FORMATION Y [W][S] "..formationVec.y);
    out(12, "FORMATION Z [E][D] "..formationVec.z);
	
    if target==nil then
		--追尾対象なし
	else
		--追尾対象あり
		
		--追尾対象の情報を取得
		local nt=_NTICKS();
		local nx=(math.sin(nt/150)-math.sin(nt/350))/2;
		local ny=(math.sin(nt/160)-math.sin(nt/360))/2;
		local nz=(math.sin(nt/140)-math.sin(nt/340))/2;
		
		math.randomseed(1519); --魔法のおまじない
		local targetX=_PLAYERX(target);
		math.randomseed(1519);
		local targetY=_PLAYERY(target);
		math.randomseed(1519);
		local targetZ=_PLAYERZ(target);
		
		targetPos=Wector.new(targetX, targetY, targetZ)-Wector.new(nx, ny, nz)*(_PLAYERCHIPS(target)^(1/3));
		mono:tick(targetPos);
		
		--追尾対象のローカルベクトルを取得
		targetLocal={};
		targetLocal.up=Wector.new(0, 1, 0);
		targetLocal.z=-mono:getVel():getNormal();
		targetLocal.y=(targetLocal.up-targetLocal.z*(targetLocal.up^targetLocal.z)):getNormal();
		targetLocal.x=targetLocal.y:getOuter(targetLocal.z):getNormal()
		
		targetPosVec=mono:getPos();
		
		--[[
		_SETCOLOR(tonumber("FF0000", 16));
		_MOVE3D(p.x, p.y, p.z);
		_LINE3D(p.x+targetLocal.x.x, p.y+targetLocal.x.y, p.z+targetLocal.x.z);
		_SETCOLOR(tonumber("00FF00", 16));
		_MOVE3D(p.x, p.y, p.z);
		_LINE3D(p.x+targetLocal.y.x, p.y+targetLocal.y.y, p.z+targetLocal.y.z);
		_SETCOLOR(tonumber("0000FF", 16));
		_MOVE3D(p.x, p.y, p.z);
		_LINE3D(p.x+targetLocal.z.x, p.y+targetLocal.z.y, p.z+targetLocal.z.z);
		--]]
		--[[
		wing1=Wector.new(60, 0, 30):getWVec2(targetLocal.x, targetLocal.y, targetLocal.z);
		wing2=Wector.new(-60, 0, 30):getWVec2(targetLocal.x, targetLocal.y, targetLocal.z);
		
		_SETCOLOR(tonumber("FF0000", 16));
		_MOVE3D(p.x, p.y, p.z);
		_LINE3D(p.x+wing1.x, p.y+wing1.y, p.z+wing1.z);
		_MOVE3D(p.x, p.y, p.z);
		_LINE3D(p.x+wing2.x, p.y+wing2.y, p.z+wing2.z);
		--]]
		
		--飛行する目標を設定する
		targetPosVec2=mono:getFuturePos(0);
		formationPosVec=targetPosVec2+formationVec:getWVec2(targetLocal.x, targetLocal.y, targetLocal.z);
		
		localDiffVec=(formationPosVec-Wector:getPosVec(CORE)):getLVec(CORE);
		localDiffVecNorm=localDiffVec;
		
		targetSpdVec=mono:getVel();
		targetSpdVecNorm=targetSpdVec:getNormal();
		targetSpd=targetSpdVec:getLength()*30*60*60/1000;
		
		myPosVec=Wector:getPosVec(CORE);
		mySpdVec=monoMe:getVel();
		mySpd=-bodyVZ*60*60/1000;
		
		diffSpdVec=targetSpdVec-mySpdVec;
		
		disVec=formationPosVec-myPosVec;
		dis=disVec:getLength();
		disVecLocal=disVec:getLVec(CORE);
		--追尾対象を基準にしたローカル座標
		disVecLocal2=disVec:getLVec(targetLocal.x, targetLocal.y, targetLocal.z);
		
		--	接近した場合は対象機の航路を先読みする
		forwordTime=limit((100-math.abs(disVecLocal2.z)), 0, 100)/100*15;
		formationPosVec2=formationPosVec+mono:getFuturePos(forwordTime)-targetPosVec2;
		
		--相対速度を調整する
		formationPosVec3=formationPosVec2+diffSpdVec*1.0;
		
		--相対位置を調整する
		formationPosVec4=formationPosVec3+disVec*0.5;
		disVec2=formationPosVec4-myPosVec;
		
		--単純な追尾では重力の影響で高度が不足するので補正する
		disVecTab=disVec2+VECY*PID("TRACK_TAB", 0, disVec2.y, 0.0, 0.1, 0.0, -100.0, 100.0, 0.75, 21);
		
		--高度150以上を維持する
		disVecHeight=disVecTab:getNormal()+VECY*limit((150-myPosVec.y)/150, 0, 0.5);
		
		--追尾対象を表示する
		_SETCOLOR(tonumber("FF0000", 16));
		_MOVE3D(myPosVec.x, myPosVec.y, myPosVec.z);
		_LINE3D(formationPosVec4.x, formationPosVec4.y, formationPosVec4.z);
		
		formationVec:getWVec2(targetLocal.x, targetLocal.y, targetLocal.z);
		
		_SETCOLOR(tonumber("FF00FF", 16));
		_MOVE3D(myPosVec.x, myPosVec.y, myPosVec.z);
		_LINE3D(formationPosVec.x, formationPosVec.y, formationPosVec.z);
		_LINE3D(targetPosVec.x, targetPosVec.y, targetPosVec.z);
		
		--追尾処理
		local v=disVecHeight:getLVec(CORE):getNormal();
		local vp=Wector.new(0, v.y, v.z):getNormal();
		local vr=Wector.new(v.x, v.y, 0):getNormal();
		local vy=Wector.new(v.x, 0, v.z):getNormal();
		
		local p=math.deg(math.acos(vp^(-VECZ)));
		if 0<vp.y then p=-p; end
		local r=math.deg(math.acos(vr^(VECY)))*(1-math.abs(v^-VECZ));
		if vr.x<0 then r=-r; end
		local y=math.deg(math.acos(vy^(-VECZ)));
		if vy.x<0 then y=-y; end
		
		--入力制御
		inputSpeed=PID("TRACK_SPEED", 0, targetSpd+limit(-disVecLocal2.z, -250, 250)*1.0, 1.0, 0.0, 1.0, -0.0, 500.0, 1.00, 20);
		inputPitch=PID("TRACK_PITCH", 0, p, 15.0, 0.0, 30.0, -15.0, 15.0, 0.75);
		inputRoll=PID("TRACK_ROLL", 0, r, 15.0, 0.0, 30.0, -15.0, 15.0, 0.75);
		inputYaw=PID("TRACK_YAW", 0, y, 15.0, 0.0, 30.0, -15.0, 15.0, 0.75);
		
		--機体を水平に近づける
		local yvec=Wector.new(0, 1, 0):getLVec(CORE):getNormal();
		local vr=Wector.new(yvec.x, yvec.y, 0):getNormal();
		local r=math.deg(math.acos(vr^(VECY)));
		if vr.x<0 then r=-r; end
		inputRoll=inputRoll+limit(r*1, -15, 15);
	end
	--[[
    inputSpeed=0;
    inputRoll=0;
    inputPitch=0;
    inputYaw=0;
	--]]
  end

-- 徐々に数値をターゲットに近づける便利関数
function step2(val, target, step)
	if math.abs(val-target)<=step then
		val=target;
	else
		if target<val then
			val=val-step;
		else
			val=val+step;
		end
	end
	return val;
end

-- 数値を範囲内に丸める便利関数
function limit(val,val_min,val_max)
	return math.max(val_min,math.min(val_max,val));
end

-- PID制御用の便利関数
function PID(id, val, target, kp, ki, kd, min, max, damper, debug)
	local p,i,d;
	
	local dis=target-val;
	if _G["PID_I_"..id]==nil then _G["PID_I_"..id]=0 end;
	if _G["PID_D_"..id]==nil then _G["PID_D_"..id]=dis end;
	
	p=dis*kp;
	
	_G["PID_I_"..id]=_G["PID_I_"..id]*damper+dis*ki;
	_G["PID_I_"..id]=limit(_G["PID_I_"..id], min, max);
	i=_G["PID_I_"..id];
	
	d=(dis-_G["PID_D_"..id])*kd;
	_G["PID_D_"..id]=dis;
	
	if debug~=nil then
		out(debug,id,"  p= ", p, " i= ", i, " d= ", d)
	end
	
	return p+i+d
end
}
