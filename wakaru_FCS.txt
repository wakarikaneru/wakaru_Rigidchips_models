Val
{
}
Key
{
}
Body
{
	Core(name=CORE) {}
}
Lua
{
require("wakaru/wakaru_eye.lua");

	KEY_UP=0;
	KEY_DOWN=1;
	KEY_LEFT=2;
	KEY_RIGHT=3;
	KEY_Z=4;
	KEY_X=5;
	KEY_C=6;
	KEY_A=7;
	KEY_S=8;
	KEY_D=9;
	KEY_V=10;
	KEY_B=11;
	KEY_F=12;
	KEY_G=13;
	KEY_Q=14;
	KEY_W=15;
	KEY_E=16;

eye=Wakaru_Eye.new();
target=0;
targetID=nil;

ballet={}
for i=0, 180 do
	ballet[i]={};
	ballet[i].pos=Wector.new(0, 0, 0);
	ballet[i].spd=Wector.new(0, 0, 0);
	ballet[i].hit=0;
end

function OnFrame()
	eye:tick();
	if _KEYDOWN(KEY_Z)==1 then flag=not flag end
	if _PLAYERS()~=0 and flag then

		out(10,_PLAYERMYID());

		if _KEYDOWN(KEY_UP)==1 then target=target-1; end
		if target<0 then target=_PLAYERS()-1 elseif _PLAYERS()<=target then target=0 end
		out(0, "FCS TARGET (N) ".._PLAYERNAME(target));

		if _KEYDOWN(KEY_G)==1 then
			Wakaru_Eye:setMode(math.mod(Wakaru_Eye.mode+1, 3));
		end
		out(1, "MODE (H) "..Wakaru_Eye.mode);

		if _KEYDOWN(KEY_X)==1 or true then
			targetID=_PLAYERID(target);
		end

		targetPos=eye:getFuturePos2(targetID, Wector.new(_X(0), _Y(0), _Z(0)), Wector.new(_VX(0), _VY(0), _VZ(0)):getWVec(0)/_BASE());
		targetReadTime=eye:getReadTime2(targetID, Wector.new(_X(0), _Y(0), _Z(0)), Wector.new(_VX(0), _VY(0), _VZ(0)):getWVec(0)/_BASE());

		--�g�q�e
		for i=180, 1, -1 do
			ballet[i].pos=ballet[i-1].pos;
			ballet[i].spd=ballet[i-1].spd;
			ballet[i].hit=ballet[i-1].hit-1;
		end
		ballet[0].pos=Wector:getPosVec(0);
		ballet[0].spd=((targetPos-Wector.new(_X(0), _Y(0), _Z(0))):getNormal()*600+Wector.new(_VX(0), _VY(0), _VZ(0)):getWVec(0))/_BASE();
		ballet[0].hit=targetReadTime;

		_SETCOLOR(tonumber("FFFF00", 16));
		_MOVE3D(ballet[0].pos.x, ballet[0].pos.y, ballet[0].pos.z)
		for i=0, 180 do
			ballet[i].pos=ballet[i].pos+ballet[i].spd;
			p=ballet[i].pos;
			pe=p-ballet[i].spd;
			if ballet[i].hit <= 0 then
				_SETCOLOR(tonumber("FF0000", 16));
			else
				_SETCOLOR(tonumber("FFFF00", 16));
			end
			_MOVE3D(p.x, p.y, p.z);
			_LINE3D(pe.x, pe.y, pe.z);
		end

	else
		out(0, "FCS OFFLINE");
	end
end
}
