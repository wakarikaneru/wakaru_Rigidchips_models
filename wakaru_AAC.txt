// [RCD] 
Val
{
	ANGLE(default=90, min=0, max=120)
	ARM01(default=90, min=90, max=180)
	ARM02(default=180, max=180)
	ARM03(default=-90, min=-90, max=0)
	ARM11(default=90, min=90, max=180)
	ARM12(default=180, max=180)
	ARM13(default=-90, min=-90, max=0)
	ARM21(default=90, min=90, max=180)
	ARM22(default=180, max=180)
	ARM23(default=-90, min=-90, max=0)
	ARM31(default=90, min=90, max=180)
	ARM32(default=180, max=180)
	ARM33(default=-90, min=-90, max=0)
	ROT1(default=0, min=-1000000, max=1000000)
	ROT2(default=90, min=-1000000, max=1000000)
	TRIG0(default=0, max=200000)
	TRIG1(default=0, max=200000)
	TRIG2(default=0, max=200000)
	TRIG3(default=0, max=200000)
}
Key
{
}
Body
{
	Core(name=CORE, user2=811) {
		S:Weight(angle=ANGLE, name=BASE, option=1, damper=1) {
			S:TrimF(angle=ROT1, option=1, damper=1) {
				N:Weight(angle=120, option=2) {
					N:Weight(option=2) {
						N:Weight(angle=150, option=4) { }
					}
				}
				N:Weight(angle=-120, option=2) {
					N:Weight(option=2) {
						N:Weight(angle=-150, option=4) { }
					}
				}
			}
			S:TrimF(angle=ROT2, option=1, damper=1) {
				N:Weight(angle=120, option=2) {
					N:Weight(option=2) {
						N:Weight(angle=150, option=4) { }
					}
				}
				N:Weight(angle=-120, option=2) {
					N:Weight(option=2) {
						N:Weight(angle=-150, option=4) { }
					}
				}
			}
		}
		S:Jet(angle=ARM01, name=MOUNT0, option=1, damper=1, spring=1) {
			S:Jet(angle=ARM02, option=1, damper=1, spring=1) {
				S:Arm(angle=ARM03, name=GUN0, power=TRIG0, option=200000, damper=1, spring=1) { }
			}
		}
		S:Jet(angle=ARM11, name=MOUNT1, option=1, damper=1, spring=1) {
			S:Jet(angle=ARM12, option=1, damper=1, spring=1) {
				S:Arm(angle=ARM13, name=GUN1, power=TRIG1, option=200000, damper=1, spring=1) { }
			}
		}
		S:Jet(angle=ARM21, name=MOUNT2, option=1, damper=1, spring=1) {
			S:Jet(angle=ARM22, option=1, damper=1, spring=1) {
				S:Arm(angle=ARM23, name=GUN2, power=TRIG2, option=200000, damper=1, spring=1) { }
			}
		}
		S:Jet(angle=ARM31, name=MOUNT3, option=1, damper=1, spring=1) {
			S:Jet(angle=ARM32, option=1, damper=1, spring=1) {
				S:Arm(angle=ARM33, name=GUN3, power=TRIG3, option=200000, damper=1, spring=1) { }
			}
		}
	}
}
Lua
{
	KEY_UP=0;
	KEY_DOWN=1;
	KEY_LEFT=2;
	KEY_RIGHT=3;
	KEY_Z=4;
	KEY_X=5;
	KEY_C=6;
	KEY_A=7;
	KEY_S=8;
	KEY_D=9;
	KEY_V=10;
	KEY_B=11;
	KEY_F=12;
	KEY_G=13;
	KEY_Q=14;
	KEY_W=15;
	KEY_E=16;
	
	FIREANGLE=math.deg(math.acos(1/4+0.1));
	STEP=(90-FIREANGLE)/4;

	arm0r=90;
	arm1r=90;
	arm2r=90;
	arm3r=90;

	armNum=0;
	ARMMAX=4;

	pitch=0;
	yaw=_AY(CORE)*180/math.pi;
	
	initflag=false;
	
	require("wakaru/wakaru_eye.lua");
	
function init()
	BomberCharge=loadlib("BomberDLL.dll", "bomber_Charge");
	_ZOOM(90);
	initflag=true;
	eye=Wakaru_Eye.new(CORE, 300);
	
	target=0;
	targetPos=Wector.new(0, 0, 0);
	readTime=0;
	aimVec=targetPos-Wector.getPosVec(CORE);
end
	
function main()
	if not initflag then init() end
	
	bomberRegulation()
	
	eye:tick();
	eye:dispPlayer(0, KEY_DOWN, KEY_RIGHT, KEY_LEFT);
	eye:dispOffset(1, KEY_G, KEY_B, KEY_V);
	
	armSpd=Wector.new(_VX(CORE), _VY(CORE), _VZ(CORE)):getWVec(CORE)/_BASE();
	
	cross();
	targetPos=Wector.new(0, 0, 0);
	
	if _KEY(KEY_Q)==1 then _ZOOM(_ZOOM()-1); end
	if _KEY(KEY_A)==1 then _ZOOM(_ZOOM()+1); end
	
	if _PLAYERS()~=0 then
		if _KEYDOWN(KEY_C)==1 then target=target+1; end
		if _KEYDOWN(KEY_Z)==1 then target=target-1; end
		if target<0 then target=_PLAYERS()-1 elseif _PLAYERS()<=target then target=0 end
		out(5, "TARGET (Z) ".._PLAYERNAME(target).." (C) ");
		targetPos=eye:getFuturePos2(_PLAYERID(target), Wector:getPosVec(ARM), armSpd);
	else
		out(5, "OffLine");
	end
	
	aimVec=(targetPos-Wector.getPosVec(CORE)):getLVec(CORE);

	aimVecV=Wector.new(0, aimVec.y, math.sqrt(aimVec["x"]^2+aimVec["z"]^2)):getNormal();
	aimVecH=Wector.new(aimVec.x, 0, aimVec.z):getNormal();
	
	rotV=math.deg(math.acos(Wector.new(0, 0, 1)^aimVecV));
	if 0<aimVecV.y then else rotV=-rotV; end
	rotV=math.min(10,math.max(-10,rotV));
	
	rotH=math.deg(math.acos(Wector.new(0, 0, -1)^aimVecH));
	if 0<aimVecH.x then else rotH=-rotH; end
	rotH=math.min(10,math.max(-10,rotH));

	ANGLE=ANGLE-rotV;

	ROT1=ROT1+rotH;
	ROT2=ROT1+90;

	for i=0,ARMMAX-1 do

		if _TOP(_G["GUN"..i])~=CORE then
			local aa=_BYE(_G["MOUNT"..i]);
		end

		if _G["arm"..i.."r"]==FIREANGLE then
			_G["TRIG"..i]=_OPTION(_G["GUN"..i]);
			armNum=armNum+1;
		else
			_G["TRIG"..i]=0;
		end

		armNum=math.mod(armNum,ARMMAX);

		if i==armNum and _KEY(KEY_X)==1 and _OPTION(_G["GUN"..i])<=_E(_G["GUN"..i]) then
			_G["arm"..i.."r"]=step2(_G["arm"..i.."r"], FIREANGLE, STEP);
		else
			_G["arm"..i.."r"]=step2(_G["arm"..i.."r"], 90, STEP);
		end

		_G["ARM"..i.."1"]=180-_G["arm"..i.."r"];
		_G["ARM"..i.."2"]=2*_G["arm"..i.."r"];
		_G["ARM"..i.."3"]=-_G["arm"..i.."r"];
	end

end

function bomberRegulation()
	for i=0, _CHIPS()-1 do
		if _TYPE(i)==10 then
			BomberCharge(i);
		end
	end
end

function angleNorm(rot)
	while(rot<-180) do
		rot=rot+360;
	end
	while(rot>180) do
		rot=rot-360;
	end
	return rot
end

function step2(val, target, step)
	if math.abs(val-target)<=step then
		val=target;
	else
		if target<val then
			val=val-step;
		else
			val=val+step;
		end
	end
	return val;
end

function limit(val,min,max)
	return math.max(min,math.min(max,val));
end

function cross()
	_SETCOLOR(tonumber("000000", 16))

	_MOVE2D(0,-1)
	_LINE2D(0,1)

	_MOVE2D(-1,0)
	_LINE2D(1,0)
end

function drawTarget(chip, pos, dis, fpos, fdis)
	_SETCOLOR(tonumber("00FF00", 16));
	
	local p1=(Wector.new(1, 1, 0)*dis/60):getWVec(chip)+pos;
	local p2=(Wector.new(1, -1, 0)*dis/60):getWVec(chip)+pos;
	local p3=(Wector.new(-1, -1, 0)*dis/60):getWVec(chip)+pos;
	local p4=(Wector.new(-1, 1, 0)*dis/60):getWVec(chip)+pos;
	
	_MOVE3D(p1.x,p1.y,p1.z);
	_LINE3D(p2.x,p2.y,p2.z);
	_LINE3D(p3.x,p3.y,p3.z);
	_LINE3D(p4.x,p4.y,p4.z);
	_LINE3D(p1.x,p1.y,p1.z);
	
	local p1=(Wector.new(1, 1, 0)*fdis/60/2):getWVec(chip)+fpos;
	local p2=(Wector.new(1, -1, 0)*fdis/60/2):getWVec(chip)+fpos;
	local p3=(Wector.new(-1, -1, 0)*fdis/60/2):getWVec(chip)+fpos;
	local p4=(Wector.new(-1, 1, 0)*fdis/60/2):getWVec(chip)+fpos;

	_MOVE3D(p1.x,p1.y,p1.z);
	_LINE3D(p2.x,p2.y,p2.z);
	_LINE3D(p3.x,p3.y,p3.z);
	_LINE3D(p4.x,p4.y,p4.z);
	_LINE3D(p1.x,p1.y,p1.z);

	_MOVE3D(pos.x, pos.y, pos.z);
	_LINE3D(fpos.x, fpos.y, fpos.z);
end
}
