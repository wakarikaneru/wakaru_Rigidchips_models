Val
{
	JET_1X(default=0, min=-2147483648, max=2147483648)
	JET_1Z(default=0, min=-2147483648, max=2147483648)
	JET_2X(default=0, min=-2147483648, max=2147483648)
	JET_2Z(default=0, min=-2147483648, max=2147483648)
	JET_Y(default=0, min=-2147483648, max=2147483648)
	TRIG1(default=0, max=12800000)
	TRIG2(default=0, max=12800000)
	WHEEL(default=0, min=-2147483648, max=2147483648)
}
Key
{
}
Body
{
	Core(name=CORE, user2=811) {
		S:Jet(angle=180, power=-JET_Y) { }
		N:Jet(angle=90, power=-JET_2Z) {
			S:Arm(name=ARM_1, power=TRIG1, option=12800000) { }
		}
		W:Jet(angle=90, power=JET_2X) {
			E:Arm(name=ARM_1D, power=TRIG1, option=12800000) { }
		}
		S:Jet(angle=-90, power=-JET_1Z) {
			N:Arm(name=ARM_2, power=TRIG2, option=12800000) { }
		}
		E:Jet(angle=-90, power=JET_1X) {
			W:Arm(name=ARM_2D, power=TRIG2, option=12800000) { }
		}
		N:RLW(angle=180, power=WHEEL, brake=2147483648) { }
	}
}
Lua
{
	KEY_UP=0;
	KEY_DOWN=1;
	KEY_LEFT=2;
	KEY_RIGHT=3;
	KEY_Z=4;
	KEY_X=5;
	KEY_C=6;
	KEY_A=7;
	KEY_S=8;
	KEY_D=9;
	KEY_V=10;
	KEY_B=11;
	KEY_F=12;
	KEY_G=13;
	KEY_Q=14;
	KEY_W=15;
	KEY_E=16;
	
	function analog(i)
		if _ANALOG(i)==0 then
			return 0;
		else
			return (_ANALOG(i)/1000)^2*(_ANALOG(i)/math.abs(_ANALOG(i)));
		end
	end
	
	initflag=false;
	
	require("wakaru/wakaru_eye.lua");
	require("wakaru/wakaru_anti.lua");
	require("cel/Science/BasePhysic.lua");
	
	function init()
		initflag=true;
		BomberCharge=loadlib("BomberDLL.dll", "bomber_Charge");
		
		ticks=0;
		
		corePhys=BasePhysic.new(CORE);
	
		eye=Wakaru_Eye.new(CORE, 1200);
		anti=Wakaru_Anti.new();
		anti.disp=true;
		
		VECX=Wector.new(1, 0, 0);
		VECY=Wector.new(0, 1, 0);
		VECZ=Wector.new(0, 0, 1);
		
		spdLimit=100/108;
		
		aimPos=Wector.new(0, 0, 0);
		
		attack=false;
		targetSelect=0;
		
		targetName=nil;
		targetID=nil;
		
		enemyFireTime=0;
		
		enemyList={};	--key:ID, val:Name
		enemyFire={};
		
		enemyFireLevel=1;
		
		useBackGun=false;
		
		fightRange=100;
		attackRadius=3.0;
		
		visible=false;
		anti:setDisp(visible);
		
		score=0;
	end

	function main()
		if not initflag then init(); end
		ticks=ticks+1;
		
		--
		eye:tick();
		anti:tick();
		bomberRegulation();
		
		corePhys:Renew();
		corePos=Wector:getPosVec(CORE);
		coreSpdW=getSpdVec(CORE);
		coreSpdL=coreSpdW:getLVec(CORE);
		
		armPos1=(Wector:getPosVec(ARM_1)+Wector:getPosVec(ARM_1D))/2;
		armPos2=(Wector:getPosVec(ARM_2)+Wector:getPosVec(ARM_2D))/2;
		armSpd1=(getSpdVec2(ARM_1)+getSpdVec2(ARM_1D))/2;
		armSpd2=(getSpdVec2(ARM_2)+getSpdVec2(ARM_2D))/2;
		--
		
		math.randomseed((_WX(0)+_WY(0)+_WZ(0)+_TICKS())*123456789);
		
		--ëÄçÏ
		out(24, _FPS())
		if _PLAYERS()~=0 then
			if _KEYDOWN(KEY_RIGHT)==1 then targetSelect=targetSelect+1; end
			if _KEYDOWN(KEY_LEFT)==1 then targetSelect=targetSelect-1; end
			if targetSelect<0 then targetSelect=_PLAYERS()-1 elseif _PLAYERS()<=targetSelect then targetSelect=0 end
			out(0, "SELECT [<] ".._PLAYERNAME(targetSelect).." [>] ");

			if not (_PLAYERMYID()==_PLAYERID(targetSelect)) then
				if _KEYDOWN(KEY_X)==1 then
					if targetID==_PLAYERID(targetSelect) then
						targetID=nil;
						targetName=nil;
					else
						targetID=_PLAYERID(targetSelect);
						targetName=_PLAYERNAME(targetSelect);
					end
				end

				if _KEYDOWN(KEY_Z)==1 then
					if enemyList[_PLAYERID(targetSelect)]==nil then
						enemyList[_PLAYERID(targetSelect)]=_PLAYERNAME(targetSelect);	--ÉAÉå
					else
						enemyList[_PLAYERID(targetSelect)]=nil;	--ÉAÉå
					end
				end
			end
			
			if not (targetID==nil) then
				out(2, "TARGET [X] "..targetName);
			else
				out(2, "TARGET [X] NOTARGET");
			end
		else
			out(0, "OFFLINE");
		end
		
		i=0;
		out(6, "ENEMYLIST [Z] CLEAR [A]");
		for key,value in enemyList do
			out(7+i, value);
			i=i+1;
		end
		
		if _KEYDOWN(KEY_A)==1 then
			enemyList={};
			targetID=nil;
			targetName=nil;
		end
		
		if _KEY(KEY_UP)==1 then
			fightRange=fightRange-10;
		end
		if _KEY(KEY_DOWN)==1 then
			fightRange=fightRange+10;
		end
		fightRange=limit(fightRange, 0, 1200);
		out(4, "RANGE [Å»][Å…] "..(fightRange).." [m]");
	
		if _KEYDOWN(KEY_C)==1 then
			attack=not attack;
		end
		
		if attack then
			out(3, "ATTACK [C] ON");
		else
			out(3, "ATTACK [C] OFF");
		end
		
		if _KEYDOWN(KEY_V)==1 then
			visible=not visible;
			anti:setDisp(visible);
		end
		
		if visible then
			out(20, "VISIBLE [V] ON");
		else
			out(20, "VISIBLE [V] OFF");
		end
		
		--
		for key,value in enemyList do
			antiEnemy(key);		--ìGÇ∆îΩî≠Ç∑ÇÈ
		end
		antiGround();	--ínñ Ç∆îΩî≠
		--antiStay();		--ìÆÇ´ë±ÇØÇÈ
		--antiRandom();	--ìÆÇ´ÇÉâÉìÉ_ÉÄÇ…Ç∑ÇÈ
				
		e=toWector(anti:effect(corePos.x, corePos.y, corePos.z));	--êiçsï˚å¸ÇåàíË
		
		--ìGÇ©ÇÁó£ÇÍâﬂÇ¨Ç»Ç¢ÇÊÇ§Ç…
		if not (targetID==nil) then
			enemyPos=eye:getPos(targetID);
			enemyDis=(enemyPos-corePos):getLength();
			if fightRange<enemyDis then
				d=(enemyPos-corePos):getNormal();
				e=e+d*spdLimit;
			end
		end

		if spdLimit<e:getLength() then
			e=e:getNormal()*spdLimit;
		end
		
		if e:getLength()<spdLimit/10 then
			e=e*0;
		end
		
		if _KEY(KEY_S)==1 then
			e=e*0;
		end
		
		
		
		--[[
		_SETCOLOR(tonumber("0000FF", 16));
		_MOVE3D(_X(CORE), _Y(CORE), _Z(CORE));
		_LINE3D(_X(CORE)+e.x, _Y(CORE)+e.y, _Z(CORE)+e.z);
		--]]
		
		--ã@ëÃÇÃà⁄ìÆ
		
		powX=PID("POWERX", coreSpdW.x, e.x, 200000, 200000, 200000, -200000, 200000, 1.00);
		powY=PID("POWERY", coreSpdW.y, e.y, 200000, 200000, 200000, -200000, 200000, 1.00);
		powZ=PID("POWERZ", coreSpdW.z, e.z, 200000, 200000, 200000, -200000, 200000, 1.00);
		
		pow=Wector.new(powX, powY, powZ);
		pow=pow:getLVec(CORE);
		
		--ÉPÉcÇÃèeÇégÇ§
		if _E(ARM_1)==_OPTION(ARM_1) and _E(ARM_2)==_OPTION(ARM_2) then
			if _OPTION(ARM_1)<=_OPTION(ARM_2) then
				useBackGun=true;
			else
				useBackGun=false;
			end
		else
			useBackGun=false;
			if _OPTION(ARM_2)-_E(ARM_2)<=_OPTION(ARM_1)-_E(ARM_1) then
				useBackGun=true;
			end
		end
		useBackGun=false;
		
		--è∆èÄÇ∑ÇÈ
		if not (targetID==nil) then
			readTime=eye:getReadTime2(targetID, corePos, coreSpdW);
			if 60<readTime then
				aimPos=eye:getPos(targetID);
			else
				if useBackGun then
					aimPos=eye:getFuturePos2(targetID, armPos2, armSpd2);
				else
					aimPos=eye:getFuturePos2(targetID, armPos1, armSpd1);
				end
			end
		end
		
		if useBackGun then
			aimVec=(armPos2-aimPos):getLVec(CORE):getNormal();
		else
			aimVec=(aimPos-armPos1):getLVec(CORE):getNormal();
		end
		
		vecX=Wector.new(aimVec.x, aimVec.y, 0):getNormal();
		rotX=math.deg(math.acos(vecX^VECY));
		if aimVec.x<0 then
			rotX=-rotX;
		end
			
		vecZ=Wector.new(0, aimVec.y, aimVec.z):getNormal();
		rotZ=math.deg(math.acos(vecZ^VECY));
		if aimVec.z<0 then
			rotZ=-rotZ;
		end
			
		aimX=PID("AIMX", rotX, 0, 7500, 750, 7500, -750, 750, 1.00);
		aimZ=PID("AIMZ", rotZ, 0, 7500, 750, 7500, -750, 750, 1.00);
			
		JET_1X=pow.x-aimX;
		JET_2X=pow.x+aimX;
		JET_Y=pow.y*2;
		JET_1Z=pow.z-aimZ;
		JET_2Z=pow.z+aimZ;
			
		WHEEL=-PID("ROLL", corePhys.wy, 0, 7500, 7500, 0, -7500, 7500, 1.00);	--Yé≤ÇÃâÒì]Çó}êßÇ∑ÇÈ
		
		if not (targetID==nil) then
			--è∆èÄÇÃìxçáÇ¢Ç
			
			dist=(aimPos-corePos):getLength();
			radius=math.sin(math.acos(aimVec^VECY))*dist;
			
			if useBackGun then
				dist=(aimPos-armPos2):getLength();
				local z=(Wector.new(0,0,-1):getWVec(ARM_2)+Wector.new(0,0,-1):getWVec(ARM_2D)):getNormal();
				radius=math.sin(math.acos(aimVec^(z:getLVec(CORE))))*dist;
			else
				dist=(aimPos-armPos1):getLength();
				local z=(Wector.new(0,0,-1):getWVec(ARM_1)+Wector.new(0,0,-1):getWVec(ARM_1D)):getNormal();
				radius=math.sin(math.acos(aimVec^(z:getLVec(CORE))))*dist;
			end
			
			if _OPTION(ARM_1)<=_E(ARM_1) or _OPTION(ARM_2)<=_E(ARM_2) then
				attackRadius=attackRadius+3.0/(30*30);
			else
				attackRadius=attackRadius-3.0/(30*30);
			end
			
			attackRadius=limit(attackRadius, 0.3, 3.0);
			
			out(15, "ARM1 "..math.floor(_E(ARM_1)/_OPTION(ARM_1)*100+0.5).." [%]");
			out(16, "ARM2 "..math.floor(_E(ARM_2)/_OPTION(ARM_2)*100+0.5).." [%]");
			out(17, "ACCURACY "..string.format("%0.2f",attackRadius).." [m]")
			
			--éÀê¸Ç™í Ç¡ÇƒÇ¢ÇÈèÍèäÇ…
			--antiWall(targetID);
			
			--çUåÇÇ∑ÇÈ
			TRIG1=0;
			TRIG2=0;
			if attack then
				if eye:getReadTime2(targetID, corePos, coreSpdW)<60 and radius<attackRadius then
					if useBackGun then
						if _OPTION(ARM_2)<=_E(ARM_2) then
							attackRadius=attackRadius*0.90;
							TRIG2=_OPTION(ARM_2);
							anti:addRay(aimPos.x, aimPos.y, aimPos.z, armPos2.x, armPos2.y, armPos2.z, _OPTION(ARM_2)/10000, 60);
						end
					else
						if _OPTION(ARM_1)<=_E(ARM_1) then
							attackRadius=attackRadius*0.90;
							TRIG1=_OPTION(ARM_1);
							anti:addRay(aimPos.x, aimPos.y, aimPos.z, armPos1.x, armPos1.y, armPos1.z, _OPTION(ARM_1)/10000, 60);
						end
					end
				end
			end
		end
	end
	
	function antiEnemy(targetID)
		enemyPos=eye:getPos(targetID);
		enemySpd=eye:getVel(targetID);
		enemyDis=(enemyPos-corePos):getLength();
		hitTime=eye:getReadTime2(_PLAYERMYID(), enemyPos, enemySpd);
		myFPos=eye:getFuturePos(_PLAYERMYID(), hitTime);
		
		anti:add(enemyPos.x, enemyPos.y, enemyPos.z, 30, 1);
		anti:add(enemyPos.x, enemyPos.y, enemyPos.z, 1, 30);
				
		if enemyFire[targetID]==nil then enemyFire[targetID]=0; end
		enemyFire[targetID]=enemyFire[targetID]+1;
		if hitTime/enemyFireLevel<enemyFire[targetID] then
			enemyFire[targetID]=0;
			anti:addRay(enemyPos.x, enemyPos.y, enemyPos.z, myFPos.x, myFPos.y, myFPos.z, 10, 60);
		end
		--anti:addBullet(enemyPos.x, enemyPos.y, enemyPos.z, myFPos.x, myFPos.y, myFPos.z, 30, 60);
	end
	
	function antiGround()
		local d=30;
		p=Wector.new(0, 0, 0);
		
		p=corePos+coreSpdW*d;
		if p.y<math.max(_GETY(p.x, p.z), 0) then
			anti:add(p.x, p.y, p.z, 60, 30);
		end
		
		p=corePos+Wector.new(math.random()*2-1, math.random()*2-1, math.random()*2-1)*d;
		if p.y<math.max(_GETY(p.x, p.z), 0) then
			anti:add(p.x, p.y, p.z, 60, 30);
		end
	end
	
	function antiStay()
		anti:add(corePos.x, corePos.y, corePos.z, 1, 30);
	end
	
	function antiWall(targetID)
		r=math.random();
		pos1=eye:getPos(targetID);
		pos2=corePos+coreSpdW*30;
		p=pos1*r+pos2*(1-r);
		if p.y<_GETY(p.x, p.z) then
			anti:addRay(pos1.x, pos1.y, pos1.z, pos2.x, pos2.y, pos2.z, 10, 2*30);
		end
	end
	
	function antiRandom()
		local d=30;
		
		if math.mod(ticks, 10)==0 then
			local x=corePos.x+math.random()*d*2-d;
			local y=corePos.y+math.random()*d*2-d;
			local z=corePos.z+math.random()*d*2-d;
			
			anti:add(x, y, z, 30, 30);
		end
		
		if math.random()*30*3<1 then
			anti:add(corePos.x+coreSpdW.x*30, corePos.y+coreSpdW.y*30, corePos.z+coreSpdW.z*30, 60, 60);
		end
	end
	
	function PID(id, val, target, kp, ki, kd, min, max, damper, debug)
		local p,i,d;
		
		local dis=target-val;
		if _G["PID_I_"..id]==nil then _G["PID_I_"..id]=0 end;
		if _G["PID_D_"..id]==nil then _G["PID_D_"..id]=dis end;

		p=dis*kp;

		_G["PID_I_"..id]=_G["PID_I_"..id]*damper+dis*ki;
		_G["PID_I_"..id]=limit(_G["PID_I_"..id], min, max);
		i=_G["PID_I_"..id];

		d=(dis-_G["PID_D_"..id])*kd;
		_G["PID_D_"..id]=dis;

		if debug~=nil then
			out(debug,id,"  p= ", p, " i= ", i, " d= ", d)
		end

		return p+i+d
	end
	
	function step2(val, target, step)
		if math.abs(val-target)<=step then
			val=target;
		else
			if target<val then
				val=val-step;
			else
				val=val+step;
			end
		end
		return val;
	end

	function step3(val, target, ratio)
		return val+(target-val)/ratio;
	end
	
	function limit(val,min,max)
		return math.max(min,math.min(max,val));
	end
	
	function getSpdVec(chipName)
		if not _G["getSpdVec_init"..chipName] then
			_G["getSpdVec_prevSpdVec"..chipName]=Wector:getPosVec(chipName);
			_G["getSpdVec_init"..chipName]=true;
		end

		local spdVec=Wector.new(0, 0, 0);
		local posVec=Wector:getPosVec(chipName);
		spdVec=posVec-_G["getSpdVec_prevSpdVec"..chipName];
		_G["getSpdVec_prevSpdVec"..chipName]=posVec;
		return spdVec;
	end
	
	function getSpdVec2(chipName)
		return (Wector.new(_VX(chipName), _VY(chipName), _VZ(chipName))/_BASE()):getWVec(chipName, true);
	end
	
	function toWector(p)
		return Wector.new(p.x, p.y, p.z);
	end
	
	function bomberRegulation()
		maxCharge=function(cn)
			while _OPTION(cn)>_E(cn) do
				local b, err = BomberCharge(cn);
				if not b then
					out(15, tostring(err));
					break;
				end
				_SETTICKS(_TICKS()+1);
			end
		end
		
		maxCharge(ARM_1);
		maxCharge(ARM_1D);
		maxCharge(ARM_2);
		maxCharge(ARM_2D);
	end
}
