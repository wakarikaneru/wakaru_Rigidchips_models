// [RCD] 
Val
{
	ANGLE_FL(default=0, min=-45, max=45)
	ANGLE_FR(default=0, min=-45, max=45)
	ANGLE_RL(default=0, min=-45, max=45)
	ANGLE_RR(default=0, min=-45, max=45)
	BRAKE_L(default=0, max=100, step=10)
	BRAKE_R(default=0, max=100, step=10)
	HANDLE_L(default=180, min=150, max=210)
	HANDLE_R(default=180, min=150, max=210)
	POWER_L(default=0, min=-50000, max=50000, step=100)
	POWER_R(default=0, min=-50000, max=50000, step=100)
}
Key
{
	0:POWER_L(step=100), POWER_R(step=100)
	1:POWER_L(step=-100), POWER_R(step=-100)
}
Body
{
	Core(name=CORE) {
		N:Frame(spring=0.1, damper=0.1) {
			N:TrimF(angle=0, spring=0.1, damper=0.1) {
				W:Trim(angle=ANGLE_FL, name=FL) {
					W:RudderF(angle=HANDLE_L, option=1) {
						E:Wheel(angle=-90, option=1) { }
					}
				}
				E:Trim(angle=-ANGLE_FR, name=FR) {
					E:RudderF(angle=HANDLE_R, option=1) {
						W:Wheel(angle=-90, option=1) { }
					}
				}
			}
		}
		S:Frame(spring=0.1, damper=0.1) {
			S:TrimF(angle=0, spring=0.1, damper=0.1) {
				E:Trim(angle=-ANGLE_RR, name=RR) {
					E:Wheel(angle=-90, power=-POWER_R, brake=BRAKE_R, option=1) { }
					W:Chip(angle=-90) { }
					E:Chip(angle=-90) { }
				}
				W:Trim(angle=ANGLE_RL, name=RL) {
					W:Wheel(angle=-90, power=POWER_L, brake=BRAKE_L, option=1) { }
					E:Chip(angle=-90) { }
					W:Chip(angle=-90) { }
				}
			}
		}
	}
}
Lua
{

	KEY_UP=0;
	KEY_DOWN=1;
	KEY_LEFT=2;
	KEY_RIGHT=3;
	KEY_Z=4;
	KEY_X=5;
	KEY_C=6;
	KEY_A=7;
	KEY_S=8;
	KEY_D=9;
	KEY_V=10;
	KEY_B=11;
	KEY_F=12;
	KEY_G=13;
	KEY_Q=14;
	KEY_W=15;
	KEY_E=16;
	
	initflag=false;
	
function main()

	--エンジンの制御
	
	
	--ハンドルの制御
	bodySpd=getSpdVec(CORE):getLVec(CORE);

	if 0.2<=-bodySpd.z then
		if _KEY(KEY_LEFT)==1 then
			HANDLE_L=step2(HANDLE_L, 150, -3/bodySpd.z/5);
			HANDLE_R=step2(HANDLE_R, 150, -3/bodySpd.z/5);
		elseif _KEY(KEY_RIGHT)==1 then
			HANDLE_L=step2(HANDLE_L, 210, -3/bodySpd.z/5);
			HANDLE_R=step2(HANDLE_R, 210, -3/bodySpd.z/5);
		else
			HANDLE_L=step2(HANDLE_L, 180, -3/bodySpd.z/5);
			HANDLE_R=step2(HANDLE_R, 180, -3/bodySpd.z/5);
		end
	else
		if _KEY(KEY_LEFT)==1 then
			HANDLE_L=step2(HANDLE_L, 150, 3);
			HANDLE_R=step2(HANDLE_R, 150, 3);
		elseif _KEY(KEY_RIGHT)==1 then
			HANDLE_L=step2(HANDLE_L, 210, 3);
			HANDLE_R=step2(HANDLE_R, 210, 3);
		else
			HANDLE_L=step2(HANDLE_L, 180, 3);
			HANDLE_R=step2(HANDLE_R, 180, 3);
		end
	end

	--エアロパーツの制御
	FLspd=getSpdVec(FL):getLVec(FL);
	FRspd=getSpdVec(FR):getLVec(FR);
	RLspd=getSpdVec(RL):getLVec(RL);
	RRspd=getSpdVec(RR):getLVec(RR);
	
	out(5, FLspd.y);
	ANGLE_FL=PID("FL", FLspd.y, 1, 0, 1, 0, -45, 45, 0.99, 0);
	ANGLE_FR=PID("FR", FRspd.y, 1, 0, 1, 0, -45, 45, 0.99, 1);
	ANGLE_RL=PID("RL", RLspd.y, 1, 0, 1, 0, -45, 45, 0.99, 2);
	ANGLE_RR=PID("RR", RRspd.y, 1, 0, 1, 0, -45, 45, 0.99, 3);
	
	
end

function step2(val, target, step)
	if math.abs(val-target)<=step then
		val=target;
	else
		if target<val then
			val=val-step;
		else
			val=val+step;
		end
	end
	return val;
end

function PID(id, val, target, kp, ki, kd, min, max, damper, debug)
	local p,i,d;
	
	local dis=target-val;
	if _G["PID_I_"..id]==nil then _G["PID_I_"..id]=0 end;
	if _G["PID_D_"..id]==nil then _G["PID_D_"..id]=dis end;

	p=dis*kp;

	_G["PID_I_"..id]=_G["PID_I_"..id]*damper+dis*ki;
	_G["PID_I_"..id]=limit(_G["PID_I_"..id], min, max);
	i=_G["PID_I_"..id];

	d=(dis-_G["PID_D_"..id])*kd;
	_G["PID_D_"..id]=dis;

	if debug~=nil then
		out(debug,id,"  p= ", p, " i= ", i, " d= ", d)
	end

	return p+i+d
end

function limit(val,min,max)
	return math.max(min,math.min(max,val));
end

function getSpdVec(chipName)
	if not _G["getSpdVec_init"..chipName] then
		_G["getSpdVec_prevSpdVec"..chipName]=Vector:getPosVec(chipName);
		_G["getSpdVec_init"..chipName]=true;
	end

	local spdVec=Vector.new(0, 0, 0);
	local posVec=Vector:getPosVec(chipName);
	spdVec=posVec-_G["getSpdVec_prevSpdVec"..chipName];
	
	_G["getSpdVec_prevSpdVec"..chipName]=posVec;

	return spdVec;
end

----Vectorクラス
--このゲーム内の、空間上のベクトルを扱う
Vector={
	getPosVec=function(self, chipName)
		return Vector.new(_X(chipName), _Y(chipName), _Z(chipName));
	end,
};
function Vector.new(vecX, vecY, vecZ)
	local obj={
		x=vecX,
		y=vecY,
		z=vecZ,

		getLength=function(self)
			return math.sqrt(self.x^2+self.y^2+self.z^2);
		end,

		getNormal=function(self)
			local length=self:getLength();
			if length~=0 then
				return self/length;
			else
				return self;
			end
		end,

		getWVec=function(self, chipName)
			local t;
			local lx; local ly; local lz;
			local wx; local wy; local wz;
			
			lx=self.x;
			ly=self.y;
			lz=self.z;
			
			if chipName==0 then
				--
			elseif _DIR(chipName)==0 then
				lx=-lx;
				lz=-lz;
			elseif _DIR(chipName)==1 then
				t=lx
				lx=-lz;
				lz=t;
			elseif _DIR(chipName)==2 then
				--
			elseif _DIR(chipName)==3 then
				t=lx
				lx=lz;
				lz=-t;
			end
			
			wx=_XX(chipName)*lx+_YX(chipName)*ly+_ZX(chipName)*lz;
			wy=_XY(chipName)*lx+_YY(chipName)*ly+_ZY(chipName)*lz;
			wz=_XZ(chipName)*lx+_YZ(chipName)*ly+_ZZ(chipName)*lz;

			return Vector.new(wx, wy, wz);
		end,

		getLVec=function(self, chipName)
			local wx; local wy; local wz;
			local lx; local ly; local lz;
			
			wx=self.x;
			wy=self.y;
			wz=self.z;
				
			lx=_XX(chipName)*wx+_XY(chipName)*wy+_XZ(chipName)*wz;
			ly=_YX(chipName)*wx+_YY(chipName)*wy+_YZ(chipName)*wz;
			lz=_ZX(chipName)*wx+_ZY(chipName)*wy+_ZZ(chipName)*wz;
			
			if chipName==0 then
				--
			elseif _DIR(chipName)==0 then--
				lx=-lx;
				lz=-lz;
			elseif _DIR(chipName)==1 then
				lx=-lx;
			elseif _DIR(chipName)==2 then
				--
			elseif _DIR(chipName)==3 then
				lz=-lz;
			end
			
			return Vector.new(lx, ly, lz);
		end,
	}
	local operation={
		__metatable = "vector",

		__add=function(vec1, vec2)
			return Vector.new(vec1.x+vec2.x, vec1.y+vec2.y, vec1.z+vec2.z);
		end,
		__sub=function(vec1, vec2)
			return Vector.new(vec1.x-vec2.x, vec1.y-vec2.y, vec1.z-vec2.z);
		end,
		__mul=function(op1, op2)
			local vec,num;
			if type(op2)=="number" then vec=op1; num=op2; else vec=op2; num=op1; end
			return Vector.new(vec.x*num, vec.y*num, vec.z*num);
		end,
		__div=function(op1, op2)
			local vec,num;
			if type(op2)=="number" then vec=op1; num=op2; else vec=op2; num=op1; end
			return Vector.new(vec.x/num, vec.y/num, vec.z/num);
		end,

		__unm=function(self)
			return Vector.new(-self.x, -self.y, -self.z);
		end,

		__pow=function(vec1,vec2)
			return vec1.x*vec2.x+vec1.y*vec2.y+vec1.z*vec2.z;
		end,
--[[
		__lt=function(vec1,vec2)
			return Vector.new(vec1.y*vec2.z-vec1.z*vec2.y, vec1.z*vec2.x-vec1.x*vec2.z, vec1.x*vec2.y-vec1.y*vec2.x);
		end,
]]--
		__tostring=function(self)
			return "x="..self.x..",y="..self.y..",z="..self.z;
			--return "x="..math.floor(self.x)..",y="..math.floor(self.y)..",z="..math.floor(self.z);
		end,
	}
	setmetatable(obj, operation);
	return obj;
end

}
