// [RCD] 
Val
{
	FIRE(default=0, max=12800000)
	PITCH(default=90, min=0, max=180)
	YAW(default=0, min=-3600000, max=3600000)
	JET0(default=0, max=12800000)
	JET1(default=0, max=12800000)
	JET2(default=0, max=12800000)
	JET3(default=0, max=12800000)
}
Key
{
}
Body
{
	Core(name=CORE, user2=811) {
		S:Weight(angle=30,  option=8, spring=0.9375) {
			S:Weight(angle=0,  option=8, spring=0.9375) {
				S:Weight(angle=150,  option=8, spring=0.9375) {
					S:Jet(name=J0, angle=180, power=-JET0) { }
					W:Weight(angle=90, option=8) { }
					E:Weight(angle=90, option=8) { }
				}
			}
			W:Weight(angle=-90, option=8) { }
			E:Weight(angle=-90, option=8) { }
		}
		W:Weight(angle=30,  option=8, spring=0.9375) {
			W:Weight(angle=0,  option=8, spring=0.9375) {
				W:Weight(angle=150,  option=8, spring=0.9375) {
					W:Jet(name=J1, angle=180, power=-JET1) { }
					N:Weight(angle=90, option=8) { }
					S:Weight(angle=90, option=8) { }
				}
			}
			N:Weight(angle=-90, option=8) { }
			S:Weight(angle=-90, option=8) { }
		}
		N:Weight(angle=30,  option=8, spring=0.9375) {
			N:Weight(angle=0,  option=8, spring=0.9375) {
				N:Weight(angle=150,  option=8, spring=0.9375) {
					N:Jet(name=J2, angle=180, power=-JET2) { }
					E:Weight(angle=90, option=8) { }
					W:Weight(angle=90, option=8) { }
				}
			}
			W:Weight(angle=-90, option=8) { }
			E:Weight(angle=-90, option=8) { }
		}
		E:Weight(angle=30,  option=8, spring=0.9375) {
			E:Weight(angle=0,  option=8, spring=0.9375) {
				E:Weight(angle=150,  option=8, spring=0.9375) {
					E:Jet(name=J3, angle=180, power=-JET3) { }
					S:Weight(angle=90, option=8) { }
					N:Weight(angle=90, option=8) { }
				}
			}
			S:Weight(angle=-90, option=8) { }
			N:Weight(angle=-90, option=8) { }
		}
		S:Weight(angle=120, option=8, damper=1, spring=1) {
			S:Weight(angle=150, option=8, damper=1, spring=1) {
				S:Trim(angle=YAW, damper=1, spring=1) {
					S:Rudder(angle=PITCH, damper=1, spring=1) {
						N:Arm(name=ARM, power=FIRE, option=12800000, damper=1, spring=1) { }
						E:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						E:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						E:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						E:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						W:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						W:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						W:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
						W:Chip(angle=180) {
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
							N:Arm(power=FIRE, option=12800000) { }
						}
					}
				}
			}
		}
		N:Weight(angle=120, option=8, spring=1, damper=1) { }
	}
}
Lua
{
	KEY_UP=0;
	KEY_DOWN=1;
	KEY_LEFT=2;
	KEY_RIGHT=3;
	KEY_Z=4;
	KEY_X=5;
	KEY_C=6;
	KEY_A=7;
	KEY_S=8;
	KEY_D=9;
	KEY_V=10;
	KEY_B=11;
	KEY_F=12;
	KEY_G=13;
	KEY_Q=14;
	KEY_W=15;
	KEY_E=16;

	initflag=false;

	require("wakaru/wakaru_eye.lua");
function init()
	initflag=true;
	eye=Wakaru_Eye.new(CORE, 300);
	BomberCharge=loadlib("BomberDLL.dll", "bomber_Charge");
	
	target=0;
	targetPos=Wector.new(0, 0, 0);
	readTime=0;
	aimVec=targetPos-Wector.getPosVec(CORE);
	yaw=0;
	pitch=0;
	rotV=0;
	t=0;
	
	regenList={};
	makeRegenList();
	
	armList={};
	makeArmList();
end

function main()
	if not initflag then init() end
	
	regen();
	eye:tick();
	eye:dispPlayer(0, KEY_DOWN, KEY_RIGHT, KEY_LEFT);
	eye:dispOffset(1, KEY_B, KEY_V);
	if _KEYDOWN(KEY_S)==1 then 
		bomberRegulation();
	end
	
	out(2, _FPS());
	out(20,_TICKS());
	
	J=(_Y(J0)+_Y(J1)+_Y(J2)+_Y(J3))/4;
	JET0=10000+PID("JET0", -(_Y(J0)-J), 0, 1000000, 100000, 10000000, -1000000, 1000000, 1.00);
	JET1=10000+PID("JET1", -(_Y(J1)-J), 0, 1000000, 100000, 10000000, -1000000, 1000000, 1.00);
	JET2=10000+PID("JET2", -(_Y(J2)-J), 0, 1000000, 100000, 10000000, -1000000, 1000000, 1.00);
	JET3=10000+PID("JET3", -(_Y(J3)-J), 0, 1000000, 100000, 10000000, -1000000, 1000000, 1.00);
	
	--armSpd=getSpdVec(ARM);
	armSpd=Wector.new(_VX(ARM), _VY(ARM), _VZ(ARM)):getWVec(ARM)/_BASE();
	
	if _PLAYERS()~=0 then
		if _KEYDOWN(KEY_C)==1 then target=target+1; end
		if _KEYDOWN(KEY_Z)==1 then target=target-1; end
		if target<0 then target=_PLAYERS()-1 elseif _PLAYERS()<=target then target=0 end
		out(5, "TARGET (Z) ".._PLAYERNAME(target).." (C) ");
		targetPos=eye:getFuturePos2(_PLAYERID(target), Wector:getPosVec(ARM), armSpd);
	else
		out(5, "OffLine");
	end
	
	if FIRE==12800000 then _RESET(0); end
	if _KEY(KEY_X)==1 and _OPTION(ARM)<=_E(ARM) then
		FIRE=12800000;
		--_SETTICKS(151);
	else
		FIRE=0;
		--_SETTICKS(0);
	end
	
	aimVecV=(targetPos-Wector:getPosVec(ARM)):getLVec(ARM):getNormal();
	aimVecV.y=0;
	aimVecV=aimVecV:getNormal();
	
	rotV=math.deg(math.acos(Wector.new(0, 0, -1)^aimVecV));
	if 0<aimVecV.x then else rotV=-rotV; end
	
	pitch=pitch+rotV;
	
	aimVecH=(targetPos-Wector:getPosVec(ARM)):getLVec(CORE):getNormal();
	aimVecH.y=0;
	aimVecH=aimVecH:getNormal();
	
	rotH=math.deg(math.acos(Wector.new(0, 0, -1)^aimVecH));
	
	if 0<aimVecH.x then else rotH=-rotH; end
	
	local disR=angleNorm(angleNorm(rotH)-angleNorm(yaw));
	
	if yaw~=0 and yaw/yaw~=1 then rotH=0; yaw=0; disR=0; end
	
	yaw=yaw+disR;
	
	--[[
	if _KEY(KEY_A)==1 then yaw=yaw+1; end
	if _KEY(KEY_D)==1 then yaw=yaw-1; end
	if _KEY(KEY_W)==1 then pitch=pitch+1; end
	if _KEY(KEY_S)==1 then pitch=pitch-1; end
	--]]
	
	pitch=limit(pitch, 0, 180);
	YAW=step2(YAW, yaw+90, 15);
	PITCH=step2(PITCH, 180-pitch, 15);
end

function step2(val, target, step)
	if math.abs(val-target)<=step then
		val=target;
	else
		if target<val then
			val=val-step;
		else
			val=val+step;
		end
	end
	return val;
end

function step3(val, target, ratio)
	return val+(target-val)/ratio;
end

function angleNorm(rot)
	while(rot<-180) do
		rot=rot+360;
	end
	while(rot>180) do
		rot=rot-360;
	end
	return rot;
end

function limit(val,min,max)
	return math.max(min,math.min(max,val));
end

function drawTarget(chip, pos, dis, fpos, fdis)
	_SETCOLOR(tonumber("00FF00", 16));
	
	local p1=(Wector.new(1, 1, 0)*dis/60):getWVec(chip)+pos;
	local p2=(Wector.new(1, -1, 0)*dis/60):getWVec(chip)+pos;
	local p3=(Wector.new(-1, -1, 0)*dis/60):getWVec(chip)+pos;
	local p4=(Wector.new(-1, 1, 0)*dis/60):getWVec(chip)+pos;
	
	_MOVE3D(p1.x,p1.y,p1.z);
	_LINE3D(p2.x,p2.y,p2.z);
	_LINE3D(p3.x,p3.y,p3.z);
	_LINE3D(p4.x,p4.y,p4.z);
	_LINE3D(p1.x,p1.y,p1.z);
	
	local p1=(Wector.new(1, 1, 0)*fdis/60/2):getWVec(chip)+fpos;
	local p2=(Wector.new(1, -1, 0)*fdis/60/2):getWVec(chip)+fpos;
	local p3=(Wector.new(-1, -1, 0)*fdis/60/2):getWVec(chip)+fpos;
	local p4=(Wector.new(-1, 1, 0)*fdis/60/2):getWVec(chip)+fpos;

	_MOVE3D(p1.x,p1.y,p1.z);
	_LINE3D(p2.x,p2.y,p2.z);
	_LINE3D(p3.x,p3.y,p3.z);
	_LINE3D(p4.x,p4.y,p4.z);
	_LINE3D(p1.x,p1.y,p1.z);

	_MOVE3D(pos.x, pos.y, pos.z);
	_LINE3D(fpos.x, fpos.y, fpos.z);
end
function getSpdVec(chipName)
	if not _G["getSpdVec_init"..chipName] then
		_G["getSpdVec_prevSpdVec"..chipName]=Wector:getPosVec(chipName);
		_G["getSpdVec_init"..chipName]=true;
	end

	local spdVec=Wector.new(0, 0, 0);
	local posVec=Wector:getPosVec(chipName);
	spdVec=posVec-_G["getSpdVec_prevSpdVec"..chipName];
	
	_G["getSpdVec_prevSpdVec"..chipName]=posVec;

	return spdVec;
end
function PID(id, val, target, kp, ki, kd, min, max, damper, debug)
	local p,i,d;
	
	local dis=target-val;
	if _G["PID_I_"..id]==nil then _G["PID_I_"..id]=0 end;
	if _G["PID_D_"..id]==nil then _G["PID_D_"..id]=dis end;

	p=dis*kp;

	_G["PID_I_"..id]=_G["PID_I_"..id]*damper+dis*ki;
	_G["PID_I_"..id]=limit(_G["PID_I_"..id], min, max);
	i=_G["PID_I_"..id];

	d=(dis-_G["PID_D_"..id])*kd;
	_G["PID_D_"..id]=dis;

	if debug~=nil then
		out(debug,id,"  p= ", p, " i= ", i, " d= ", d)
	end

	return p+i+d
end

function limit(val,min,max)
	return math.max(min,math.min(max,val));
end

function makeRegenList()
	regenList[0]=0;
	for i=1, _CHIPS()-1 do
		regenList[i]=_PARENT(i);
	end
end

regenMessage="";
function regen()
	for i=0, _CHIPS()-1 do
		if	_TOP(i)~=0 then
			_RESET(regenList[i]);
			regenMessage="Regen"..regenList[i];
		end
	end
	out(10, regenMessage);
end

function makeArmList()
	for i=1, _CHIPS()-1 do
		if _TYPE(i)==10 then
			table.insert(armList, i);
		end
	end
end

function bomberRegulation()
	maxCharge=function(cn)
		while _OPTION(cn)>_E(cn) do
			local b, err = BomberCharge(cn);
			if not b then
				out(15, tostring(err));
				_SETTICKS(151);
				break;
			end
			_SETTICKS(_TICKS()+1);
		end
	end
	
	--maxCharge(ARM);
	---[[
	for key,value in armList do
		maxCharge(value);
	end
	--]]
end
}
