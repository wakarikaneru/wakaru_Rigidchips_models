// [RCD] 
Val
{
	CC(default=0)
	JET_PITCH(default=0, min=-75000, max=75000)
	JET_ROLL(default=0, min=-75000, max=75000)
	JET_X(default=0, min=-75000, max=75000)
	JET_Y(default=0, min=-75000, max=75000)
	JET_YAW(default=0, min=-75000, max=75000)
	JET_Z(default=0, min=-75000, max=75000)
	TRIG(default=0, max=32000000, step=32000000)
}
Key
{
}
Body
{
	Core(name=CORE) {
		S:Jet(angle=180, dumper=1, power=-JET_Y) { }
		S:TrimF(dumper=1, angle=90, option=1) {
			N:Jet(dumper=1, power=JET_X) { }
			N:Jet(angle=180, power=-JET_YAW, name=JETY) { }
		}
		S:Jet(power=-JET_PITCH, name=JETP) { }
		N:Frame(dumper=1, angle=150, option=1) {
			N:Jet(dumper=1, angle=120, power=JET_Z) { }
			N:Wheel(dumper=1, angle=120, power=JET_ROLL) { }
		}
		S:Arm(angle=180, power=TRIG, option=3200000, dumper=1, name=ARM1) { }
		S:Arm(angle=180, power=TRIG, option=3200000, dumper=1) { }
		S:Cowl(angle=-90, effect=#F000) {
			S:Cowl(angle=0, effect=#F000) {
				S:Cowl(color=#FF0000) {
					S:Cowl(color=#FF0000) {
						S:Cowl(color=#FF0000) {
							S:Cowl(color=#FF0000) {
								S:Cowl(color=#FF0000) {
									S:Cowl(color=#FF0000) { }
								}
							}
						}
						E:Cowl(color=#FF0000) {
							S:Cowl(angle=0, effect=#F000) {
								E:Cowl(color=#FF0000) {
									S:Cowl(angle=0, effect=#F000) {
										E:Cowl(color=#FF0000) { }
									}
								}
							}
						}
						W:Cowl(color=#FF0000) {
							S:Cowl(angle=0, effect=#F000) {
								W:Cowl(color=#FF0000) {
									S:Cowl(angle=0, effect=#F000) {
										W:Cowl(color=#FF0000) { }
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
Lua
{
	KEY_UP=0
	KEY_DOWN=1
	KEY_LEFT=2
	KEY_RIGHT=3
	KEY_Z=4
	KEY_X=5
	KEY_C=6
	KEY_A=7
	KEY_S=8
	KEY_D=9
	KEY_V=10
	KEY_B=11
	KEY_F=12
	KEY_G=13
	KEY_Q=14
	KEY_W=15
	KEY_E=16

	Y=_Y(CORE)

	prevX=_X(CORE)
	prevY=_Y(CORE)
	prevZ=_Z(CORE)

	prevMx=_MX()
	prevMy=_MY()

	PITCH=0
	PITCHR=45
	YAW=_AY(CORE)*180/math.pi

	CT=0

	zoom=100

	bx=_X(CORE)
	by=_Y(CORE)
	bz=_Z(CORE)

	P_JET_X=JET_X
	P_JET_Y=JET_Y
	P_JET_Z=JET_Z
	P_JET_PITCH=JET_PITCH
	P_JET_YAW=JET_YAW
	P_JET_ROLL=JET_ROLL

function main()
	out(0,"ARM1 "..math.floor(_E(ARM1)/_OPTION(ARM1)*100).."%")
	CC=rgb(math.floor(math.random()*256),math.floor(math.random()*256),math.floor(math.random()*256))

	if checkDamage() then suicide() end

	local mvx=0
	local mvy=0
	local mx=_MX()/_HEIGHT()*2
	local my=_MY()/_HEIGHT()*2

	if _MR()==1 then
		mvx=mx-prevMx
		mvy=my-prevMy
		cross(2)
	else
		cross(1/10)
	end

	if _MM()==1 then
		zoom=zoom+(my-prevMy)*100
	end

	prevMx=mx
	prevMy=my

	zoom=math.min(100,math.max(1,zoom))

	local S=1/_ZOOM(zoom)

	YAW=YAW+mvx/S
	PITCH=PITCH-mvy/S

	if _ML()==1 and _MR()==1 and (1<=_E(ARM1)/_OPTION(ARM1) and _TOP(ARM1)==CORE) then
		TRIG=10000000
		zoom=zoom+30
		--suicide()
	else
		TRIG=0
	end

	if(_KEY(KEY_LEFT)==1)then
		YAW=YAW-1/30/S
	end
	if(_KEY(KEY_RIGHT)==1)then
		YAW=YAW+1/30/S
	end

	if(180<YAW)then
		YAW=YAW-360
	elseif(YAW<-180)then
		YAW=YAW+360
	end

	if(_KEY(KEY_UP)==1)then
		PITCH=PITCH+1/30/S
	end
	if(_KEY(KEY_DOWN)==1)then
		PITCH=PITCH-1/30/S
	end

	PITCH=math.min(PITCHR,math.max(-PITCHR,PITCH))
	

	if(_KEY(KEY_V)==1)then
		Y=Y-1
	end

	if(0<_H(CORE) and _H(CORE)<0.5)then
		Y=_Y(CORE)+2
	end

	if(_KEY(KEY_G)==1)then
		Y=Y+1
	end

	local x=_X(CORE)
	local y=_Y(CORE)
	local z=_Z(CORE)

	local vx=x-prevX
	local vy=y-prevY
	local vz=z-prevZ

	prevX=x
	prevY=y
	prevZ=z

	if _KEY(KEY_A)==1 then
		b=500000
	else
		b=500
	end

	local YPOW=(Y-_Y(CORE))*50000-vy*250000

	local JX,JY,JZ=getlvec(-vx*b,YPOW,-vz*b,CORE)
	JET_X=JX
	JET_Y=JY
	JET_Z=JZ

	if _KEY(KEY_A)==1 then
		if(_KEY(KEY_E)==1)then
			zoom=zoom-1
		end
		if(_KEY(KEY_D)==1)then
			zoom=zoom+1
		end
	else
		if(_KEY(KEY_E)==1)then
			JET_Z=JET_Z-25000
		end
		if(_KEY(KEY_D)==1)then
			JET_Z=JET_Z+25000
		end
	end
	if(_KEY(KEY_S)==1)then
		JET_X=JET_X+25000
	end
	if(_KEY(KEY_F)==1)then
		JET_X=JET_X-25000
	end

	disYaw=YAW-_AY(CORE)*180/math.pi
	disPitch=PITCH-_AX(CORE)*180/math.pi
	disRoll=-_AZ(CORE)*180/math.pi

	disYaw=angle_correct(disYaw)
	disPitch=angle_correct(disPitch)
	disRoll=angle_correct(disRoll)

	if pdisYaw==nil then
		pdisYaw=disYaw
		pdisPitch=disPitch
		pdisRoll=disRoll
	end

	local vYaw=disYaw-pdisYaw
	local vPitch=disPitch-pdisPitch
	local vRoll=disRoll-pdisRoll

	pdisYaw=disYaw
	pdisPitch=disPitch
	pdisRoll=disRoll

	JET_YAW=disYaw*3000+vYaw*6000
	JET_PITCH=disPitch*3000+vPitch*6000
	JET_ROLL=disRoll*300+vRoll*600

--[[
	JET_X=(JET_X+P_JET_X)/2
	JET_Y=(JET_Y+P_JET_Y)/2
	JET_Z=(JET_Z+P_JET_Z)/2
	JET_PITCH=(JET_PITCH+P_JET_PITCH)/2
	JET_YAW=(JET_YAW+P_JET_YAW)/2
	JET_ROLL=(JET_ROLL+P_JET_ROLL)/2
]]--
	P_JET_X=JET_X
	P_JET_Y=JET_Y
	P_JET_Z=JET_Z
	P_JET_PITCH=JET_PITCH
	P_JET_YAW=JET_YAW
	P_JET_ROLL=JET_ROLL
end

function cross(l)
	local x=_X(CORE)
	local y=_Y(CORE)
	local z=_Z(CORE)

	local vx=x-bx
	local vy=y-by
	local vz=z-bz

	bx=x
	by=y
	bz=z

	local lx,ly,lz=getlvec(vx,vy,vz,CORE)

	local VX=(math.atan2(20-lz,lx)*180/math.pi-90)/(_ZOOM(0)/2)
	local VY=(math.atan2(20-lz,-ly)*180/math.pi-90)/(_ZOOM(0)/2)

	--local VX=(math.atan2(20-_VZ(CORE)/_BASE(),_VX(CORE)/_BASE())*180/math.pi-90)/(_ZOOM(0)/2)
	--local VY=(math.atan2(20-_VZ(CORE)/_BASE(),-_VY(CORE)/_BASE())*180/math.pi-90)/(_ZOOM(0)/2)

	_SETCOLOR(tonumber("FF0000", 16))

	_MOVE2D(VX,VY-0.05)
	_LINE2D(VX,VY+0.05)

	_MOVE2D(VX-0.05,VY)
	_LINE2D(VX+0.05,VY)

	_SETCOLOR(tonumber("000000", 16))

	_MOVE2D(0,-l)
	_LINE2D(0,l)

	_MOVE2D(-l,0)
	_LINE2D(l,0)
end

function sight(chipName)
	local yaw=_AY(chipName)
	local x=_X(chipName)
	local y=_Y(chipName)
	local z=_Z(chipName)
	if _G["PREVX"..chipName]==nil then _G["PREVX"..chipName]=x end
	if _G["PREVY"..chipName]==nil then _G["PREVY"..chipName]=y end
	if _G["PREVZ"..chipName]==nil then _G["PREVZ"..chipName]=z end

	local tx=_X(chipName)+_ZX(chipName)*(-640)+(x-_G["PREVX"..chipName])*640/20
	local ty=_Y(chipName)+_ZY(chipName)*(-640)+(y-_G["PREVY"..chipName])*640/20
	local tz=_Z(chipName)+_ZZ(chipName)*(-640)+(z-_G["PREVZ"..chipName])*640/20

	_MOVE3D(x+math.sin(yaw+math.pi/2)*0.9,y,z+math.cos(yaw+math.pi/2)*0.9)
	_LINE3D(tx+math.sin(yaw+math.pi/2)*0.9,ty,tz+math.cos(yaw+math.pi/2)*0.9)

	_MOVE3D(x+math.sin(yaw-math.pi/2)*0.9,y,z+math.cos(yaw-math.pi/2)*0.9)
	_LINE3D(tx+math.sin(yaw-math.pi/2)*0.9,ty,tz+math.cos(yaw-math.pi/2)*0.9)

	local tx=_X(chipName)+_ZX(chipName)*(-160)+(x-_G["PREVX"..chipName])*160/20
	local ty=_Y(chipName)+_ZY(chipName)*(-160)+(y-_G["PREVY"..chipName])*160/20
	local tz=_Z(chipName)+_ZZ(chipName)*(-160)+(z-_G["PREVZ"..chipName])*160/20

	_MOVE3D(x,y,z)
	_LINE3D(tx,ty,tz)

	dis=20
	tx=_X(chipName)+_ZX(chipName)*(-dis)+(x-_G["PREVX"..chipName])*dis/20
	ty=_Y(chipName)+_ZY(chipName)*(-dis)+(y-_G["PREVY"..chipName])*dis/20
	tz=_Z(chipName)+_ZZ(chipName)*(-dis)+(z-_G["PREVZ"..chipName])*dis/20

	_MOVE3D(tx+math.sin(yaw+math.pi/2)*0.9,ty,tz+math.cos(yaw+math.pi/2)*0.9)
	_LINE3D(tx+math.sin(yaw-math.pi/2)*0.9,ty,tz+math.cos(yaw-math.pi/2)*0.9)

	dis=40
	tx=_X(chipName)+_ZX(chipName)*(-dis)+(x-_G["PREVX"..chipName])*dis/20
	ty=_Y(chipName)+_ZY(chipName)*(-dis)+(y-_G["PREVY"..chipName])*dis/20
	tz=_Z(chipName)+_ZZ(chipName)*(-dis)+(z-_G["PREVZ"..chipName])*dis/20

	_MOVE3D(tx+math.sin(yaw+math.pi/2)*0.9,ty,tz+math.cos(yaw+math.pi/2)*0.9)
	_LINE3D(tx+math.sin(yaw-math.pi/2)*0.9,ty,tz+math.cos(yaw-math.pi/2)*0.9)

	dis=80
	tx=_X(chipName)+_ZX(chipName)*(-dis)+(x-_G["PREVX"..chipName])*dis/20
	ty=_Y(chipName)+_ZY(chipName)*(-dis)+(y-_G["PREVY"..chipName])*dis/20
	tz=_Z(chipName)+_ZZ(chipName)*(-dis)+(z-_G["PREVZ"..chipName])*dis/20

	_MOVE3D(tx+math.sin(yaw+math.pi/2)*0.9,ty,tz+math.cos(yaw+math.pi/2)*0.9)
	_LINE3D(tx+math.sin(yaw-math.pi/2)*0.9,ty,tz+math.cos(yaw-math.pi/2)*0.9)

	dis=160
	tx=_X(chipName)+_ZX(chipName)*(-dis)+(x-_G["PREVX"..chipName])*dis/20
	ty=_Y(chipName)+_ZY(chipName)*(-dis)+(y-_G["PREVY"..chipName])*dis/20
	tz=_Z(chipName)+_ZZ(chipName)*(-dis)+(z-_G["PREVZ"..chipName])*dis/20

	_MOVE3D(tx+math.sin(yaw+math.pi/2)*0.9,ty,tz+math.cos(yaw+math.pi/2)*0.9)
	_LINE3D(tx+math.sin(yaw-math.pi/2)*0.9,ty,tz+math.cos(yaw-math.pi/2)*0.9)

	_G["PREVX"..chipName]=x
	_G["PREVY"..chipName]=y
	_G["PREVZ"..chipName]=z
end

function checkDamage()
	for i=0,_CHIPS()-1 do
		if _T(i)<10000 then return true end
	end
	return false
end

function suicide()
	for i=0,_CHIPS()-1 do
		aa=_BYE(i)
	end
end

function getWeight()
	local w=0
	for i=0,_CHIPS()-1 do
		if _TOP(i)==CORE then
			w=w+_M(i)
		end
	end
	return w
end

function getDis(ChipName1,ChipName2)
	local xdis=_X(ChipName1)-_X(ChipName2)
	local ydis=_Y(ChipName1)-_Y(ChipName2)
	local zdis=_Z(ChipName1)-_Z(ChipName2)
	return math.sqrt(xdis^2+ydis^2+zdis^2)
end

function rgb(r,g,b)
return r*65536+g*256+b
end

-- ローカルベクトル→ワールドベクトル変換 -------------------------------------
function getwvec(lx,ly,lz,cn)
	local wx=_XX(cn)*lx+_YX(cn)*ly+_ZX(cn)*lz
	local wy=_XY(cn)*lx+_YY(cn)*ly+_ZY(cn)*lz
	local wz=_XZ(cn)*lx+_YZ(cn)*ly+_ZZ(cn)*lz
	return wx,wy,wz
end

-- ワールドベクトル→ローカルベクトル変換 -------------------------------------
function getlvec(wx,wy,wz,cn)
	local lx=_XX(cn)*wx+_XY(cn)*wy+_XZ(cn)*wz
	local ly=_YX(cn)*wx+_YY(cn)*wy+_YZ(cn)*wz
	local lz=_ZX(cn)*wx+_ZY(cn)*wy+_ZZ(cn)*wz
	return lx,ly,lz
end

-- 角度補正 -------------------------------------------------------------------
function angle_correct(a)
	while(a<-180) do a=a+360 end
	while(a>180) do a=a-360 end
	return a
end

}
