Val
{
	PR(default=0, min=-200000, max=200000)
	PX1(default=0, min=-200000, max=200000)
	PX2(default=0, min=-200000, max=200000)
	PY1(default=0, min=-200000, max=200000)
	PY2(default=0, min=-200000, max=200000)
	PY3(default=0, min=-200000, max=200000)
	PY4(default=0, min=-200000, max=200000)
	PZ1(default=0, min=-200000, max=200000)
	PZ2(default=0, min=-200000, max=200000)
	R(default=50, min=-100000)
	Y(default=50, min=-100000)
	MODE(default=0, min=0, max=1)
}
Key
{
}
Body
{
	Core(name=CORE) {
		N:Jet(power=PY1, name=JETY1) { }
		E:Jet(power=PY2, name=JETY2) { }
		S:Jet(power=PY3, name=JETY3) { }
		W:Jet(power=PY4, name=JETY4) { }
		N:TrimF(angle=90) {
			N:Jet(power=-PX1, name=JETX1, angle=180) { }
		}
		E:TrimF(angle=90) {
			E:Jet(power=-PZ1, name=JETZ1, angle=180) { }
		}
		W:TrimF(angle=90) {
			W:Jet(power=-PZ2, name=JETZ2, angle=180) { }
		}
		S:TrimF(angle=90) {
			S:Jet(power=-PX2, name=JETX2, angle=180) { }
		}
	}
}
Lua
{
	--ÉLÅ[î‘çÜÇï™Ç©ÇËÇ‚Ç∑Ç≠Ç∑ÇÈÇ‚Ç¬
	UP=0
	DOWN=1
	LEFT=2
	RIGHT=3
	KEY_Z=4
	KEY_X=5
	KEY_C=6
	KEY_A=7
	KEY_S=8
	KEY_D=9
	KEY_V=10
	KEY_B=11
	KEY_F=12
	KEY_G=13
	KEY_Q=14
	KEY_W=15
	KEY_E=16
	
	function OnInit()
		R=_AY(CORE)*180/math.pi
		Y=_Y(CORE)
	end

function main()
	observation();
	j1=_Y(JETY1)
	j2=_Y(JETY2)
	j3=_Y(JETY3)
	j4=_Y(JETY4)

	if(_KEY(KEY_F)==1)then
		Y=Y+0.5
	elseif(_KEY(KEY_V)==1)then
		Y=Y-0.5
	end

	if(0<_H(0) and _H(0)<1.5)then
		Y=Y+(1.5-_H(0))
	end

	if(_KEY(KEY_Z)==1)then
		R=R-5
	elseif(_KEY(KEY_C)==1)then
		R=R+5
	end

	j=Y-j1
	PY1=j*200000-_VY(JETY1)*20000
	j=Y-j2
	PY2=j*200000-_VY(JETY2)*20000
	j=Y-j3
	PY3=j*200000-_VY(JETY3)*20000
	j=Y-j4
	PY4=j*200000-_VY(JETY4)*20000

	if(180<R)then
		R=R-360
	elseif(R<-180)then
		R=R+360
	end

	r=_AY(CORE)*180/math.pi
	j=R-r
	if(180<j)then
		j=j-360
	elseif(j<-180)then
		j=j+360
	end
	vr=_WY(CORE)*180/math.pi
	PR=j*1000-vr*100

	PX1=PR
	PX2=PR
	PZ1=PR
	PZ2=PR

	if(_KEY(UP)==1)then
		PZ1=PR-50000
		PZ2=PR+50000
	end
	if(_KEY(DOWN)==1)then
		PZ1=PR+50000
		PZ2=PR-50000
	end
	if(_KEY(LEFT)==1)then
		PX1=PR-50000
		PX2=PR+50000
	end
	if(_KEY(RIGHT)==1)then
		PX1=PR+50000
		PX2=PR-50000
	end

	vx=_VX(CORE)
	vz=_VZ(CORE)
	PX1=PX1+_VY(JETX1)*5000
	PX2=PX2+_VY(JETX2)*5000
	PZ1=PZ1+_VY(JETZ1)*5000
	PZ2=PZ2+_VY(JETZ2)*5000
end

noiseX=0;
noiseY=0;
noiseZ=0;

function observation()
	for i=1,_PLAYERS()-1 do
		if _PLAYERID(i)~=_PLAYERMYID() then
			noiseCanceller(i);
			logCheck(i);
			recordPos(i);
			drawTarget(i, 1);
		end
	end
	drawRader(-0.75, -0.5, 0.5, 300)
end

function logInit(pNum)
	_G["LOG"..pNum]={};
	local pos={};
	pos=getPos(pNum);
	_G["LOG"..pNum][0]=pos;

	for i=1,29 do
		_G["LOG"..pNum][i]=_G["LOG"..pNum][0];
	end
end

function logCheck(pNum)
	if _G["LOG"..pNum]==nil or 20<=getDis(_G["LOG"..pNum][0],_G["LOG"..pNum][1]) then
		logInit(pNum);
	end
end

function getPos(pNum)
	local x=0;
	local xmin=1000000;
	local xmax=-1000000;
	local y=0;
	local ymin=1000000;
	local ymax=-1000000;
	local z=0;
	local zmin=1000000;
	local zmax=-1000000;
	local n=1000;
	
	for i=1,n do
		nx=_PLAYERX(pNum);
		ny=_PLAYERY(pNum);
		nz=_PLAYERZ(pNum);
		xmax=math.max(xmax,nx);
		xmin=math.min(xmin,nx);
		ymax=math.max(ymax,ny);
		ymin=math.min(ymin,ny);
		zmax=math.max(zmax,nz);
		zmin=math.min(zmin,nz);
	end

	x=(xmax+xmin)/2;
	y=(ymax+ymin)/2;
	z=(zmax+zmin)/2;

	local pos={};
	pos.x=x+noiseX*_PLAYERCHIPS(pNum)^(1/3);
	pos.y=y+noiseY*_PLAYERCHIPS(pNum)^(1/3);
	pos.z=z+noiseZ*_PLAYERCHIPS(pNum)^(1/3);

	return pos
end

function getPos2(pNum)
	local x=0;
	local xmin=1000000;
	local xmax=-1000000;
	local y=0;
	local ymin=1000000;
	local ymax=-1000000;
	local z=0;
	local zmin=1000000;
	local zmax=-1000000;
	local n=1000;
	
	for i=1,n do
		nx=_PLAYERX(pNum);
		ny=_PLAYERY(pNum);
		nz=_PLAYERZ(pNum);
		xmax=math.max(xmax,nx);
		xmin=math.min(xmin,nx);
		ymax=math.max(ymax,ny);
		ymin=math.min(ymin,ny);
		zmax=math.max(zmax,nz);
		zmin=math.min(zmin,nz);
	end

	x=(xmax+xmin)/2;
	y=(ymax+ymin)/2;
	z=(zmax+zmin)/2;

	local pos={};
	pos.x=x;
	pos.y=y;
	pos.z=z;

	return pos;
end

function noiseCanceller(pNum)
		if _PLAYERNAME(pNum)=="wakaru" then
			local wakaruPos=getPos2(pNum);
			out(pNum,"find wakaru CHIPS= ".._PLAYERCHIPS(pNum).." x= "..wakaruPos.x.." y= "..wakaruPos.y.." z= "..wakaruPos.z);
			noiseX=(100-wakaruPos.x)/_PLAYERCHIPS(pNum)^(1/3);
			noiseY=(100-wakaruPos.y)/_PLAYERCHIPS(pNum)^(1/3);
			noiseZ=(100-wakaruPos.z)/_PLAYERCHIPS(pNum)^(1/3);
			out(pNum+1," noiseX= "..noiseX.." noiseY= "..noiseY.." noiseZ= "..noiseZ);
		end
end

function recordPos(pNum)
	for i=29,1,-1 do
		_G["LOG"..pNum][i]=_G["LOG"..pNum][i-1];
	end
	_G["LOG"..pNum][0]=getPos(pNum);
end

function getSpdVec2(pos1, pos2, tarm)
	local spdVec={};
	spdVec=mulVec(addVec(pos1,mulVec(pos2,-1)), tarm);
	return spdVec;
end

function drawLine(pNum)
	_SETCOLOR(tonumber("FF0000", 16));
	_MOVE3D(_G["LOG"..pNum][0].x,_G["LOG"..pNum][0].y,_G["LOG"..pNum][0].z);
	for i=0,29 do
		_LINE3D(_G["LOG"..pNum][i].x,_G["LOG"..pNum][i].y,_G["LOG"..pNum][i].z);
	end
end

function drawTarget(pNum, size)
	local t={};
	t.x=_G["LOG"..pNum][0].x;
	t.y=_G["LOG"..pNum][0].y;
	t.z=_G["LOG"..pNum][0].z;
	local tdis=getDis(getPosVec(CORE),t);

	if tdis<=300 then
		local p1=addVec(getWVec(mulVec({x=1, y=1, z=0}, tdis/60*size), CORE), t);
		local p2=addVec(getWVec(mulVec({x=1, y=-1, z=0}, tdis/60*size), CORE), t);
		local p3=addVec(getWVec(mulVec({x=-1, y=-1, z=0}, tdis/60*size), CORE), t);
		local p4=addVec(getWVec(mulVec({x=-1, y=1, z=0}, tdis/60*size), CORE), t);

		_SETCOLOR(tonumber("00FF00", 16));

		_MOVE3D(p1.x,p1.y,p1.z);
		_LINE3D(p2.x,p2.y,p2.z);
		_LINE3D(p3.x,p3.y,p3.z);
		_LINE3D(p4.x,p4.y,p4.z);
		_LINE3D(p1.x,p1.y,p1.z);
	end
end

function drawRader(x, y, size, range)
	_SETCOLOR(tonumber("00FF00", 16));
	drawRect(x, y, size/2);
	_MOVE2D(x+size/2,y);
	_LINE2D(x-size/2,y);
	_MOVE2D(x,y+size/2);
	_LINE2D(x,y-size/2);

	for i=1,_PLAYERS()-1 do
		if _PLAYERID(i)~=_PLAYERMYID() and getDis(getPosVec(0), _G["LOG"..i][0])<=range then
			drawMarker(getLVec(addVec(_G["LOG"..i][0], mulVec(getPosVec(0), -1)), 0), x, y, size, range);
		end
	end
end

function drawRect(x, y, size)
	_MOVE2D(x+size/2,y+size/2);
	_LINE2D(x+size/2,y-size/2);
	_LINE2D(x-size/2,y-size/2);
	_LINE2D(x-size/2,y+size/2);
	_LINE2D(x+size/2,y+size/2);
end

function drawMarker(pos, x, y, size, range)
	local disX=pos.x/range*size/2
	local disZ=pos.z/range*size/2
	local disY=pos.y/range*size/4

	_MOVE2D(x-disX, y-disZ);
	_LINE2D(x-disX, y-disZ+disY);
	drawRect(x-disX, y-disZ+disY, 0.025)
end

function getPosVec(chipName)
	local posVec={};
	posVec.x=_X(chipName)
	posVec.y=_Y(chipName)
	posVec.z=_Z(chipName)
	return posVec;
end

function getSpdVec(chipName)
	if not _G["getSpdVec_init"..chipName] then
		_G["getSpdVec_prevSpdVec"..chipName]=getPosVec(chipName);
		_G["getSpdVec_init"..chipName]=true;
	end

	local spdVec={}; posVec=getPosVec(chipName);
	spdVec=addVec(posVec, mulVec(_G["getSpdVec_prevSpdVec"..chipName], -1));
	
	_G["getSpdVec_prevSpdVec"..chipName]=posVec;

	return spdVec;
end

function addVec(vec1, vec2)
	local addVec={};
	addVec.x=vec1.x+vec2.x;
	addVec.y=vec1.y+vec2.y;
	addVec.z=vec1.z+vec2.z;

	return addVec;
end

function mulVec(vec, m)
	local mulVec={};
	mulVec.x=vec.x*m;
	mulVec.y=vec.y*m;
	mulVec.z=vec.z*m;

	return mulVec;
end

function getDis(pos1,pos2)
	local disX=pos1.x-pos2.x;
	local disY=pos1.y-pos2.y;
	local disZ=pos1.z-pos2.z;
	return math.sqrt(disX^2+disY^2+disZ^2);
end

function getVecLength(vec)
	return getDis(vec, {x=0, y=0, z=0});
end

function getNormVec(vec)
	return mulVec(vec, 1/getVecLength(vec))
end

function getWVec(lVec, chipName)
	local wVec={};
	
	wVec.x=_XX(chipName)*lVec.x+_YX(chipName)*lVec.y+_ZX(chipName)*lVec.z;
	wVec.y=_XY(chipName)*lVec.x+_YY(chipName)*lVec.y+_ZY(chipName)*lVec.z;
	wVec.z=_XZ(chipName)*lVec.x+_YZ(chipName)*lVec.y+_ZZ(chipName)*lVec.z;

	return wVec;
end

function getLVec(wVec, chipName)
	local lVec={};

	lVec.x=_XX(chipName)*wVec.x+_XY(chipName)*wVec.y+_XZ(chipName)*wVec.z;
	lVec.y=_YX(chipName)*wVec.x+_YY(chipName)*wVec.y+_YZ(chipName)*wVec.z;
	lVec.z=_ZX(chipName)*wVec.x+_ZY(chipName)*wVec.y+_ZZ(chipName)*wVec.z;

	return lVec;
end

function vecInner(vec1, vec2)
	return vec1.x*vec2.x+vec1.y*vec2.y+vec1.z*vec2.z;
end
}